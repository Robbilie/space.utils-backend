<%
    function resolveRef($ref) {
        var spl = $ref.slice(2).split("/");
        var res;
        while(spl.length > 0)
            res = (res || swagger)[spl.shift()];
        return res;
    }
%>


    "use strict";

    <% for(var name in swagger.definitions) { %>

    class <%= name %> {

        constructor () {

        }

    }

    <%= name %>.types = {
        <% for(var key in swagger.definitions[name].properties) {
            var type = "";
            if(swagger.definitions[name].properties[key].$ref) {
                type = swagger.definitions[name].properties[key].$ref.split("/").slice(-1)[0];
            } else {
                switch (swagger.definitions[name].properties[key].type) {
                    case "number":
                    case "integer":
                        type = "Number"; break;
                    case "string":
                        type = "String"; break;
                    case "array":
                        type = "Array"; break;
                    default:
                        type = "Object"; break;
                }
            }
        %>
        <%= key %>: "<%= type %>",
        <% } %>
    };
    <% } %>

    class SwaggerClient {

    }

    <%
        var handler = {};
        for(var path in swagger.paths) {
            for(var method in swagger.paths[path]) {
                if(method == "parameters")
                    continue;
                var p = swagger.paths[path][method].operationId.split("_");
                if(!handler[p[0]])
                    handler[p[0]] = {};
                handler[p[0]][p[1]] =
        function () {
            return null;
        };
            }
        }

        for(var handlername in handler) {
    %>
    class <%= handlername %> {
    <% for(var methodname in handler[handlername]) { %>
        <%= methodname %><%= handler[handlername][methodname].toString().slice(8) %>
    <% } %>
    }
    <% } %>

    if(typeof(module) != "undefined")
        module.exports = SwaggerClient;
